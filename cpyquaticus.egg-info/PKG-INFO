Metadata-Version: 2.2
Name: cpyquaticus
Version: 0.0.post1.dev13+g9196d03.d20250218
Summary: Super lightweight pyquaticus Environment to run in C (20 Environments on one core ~10k steps per second on mac book pro)
Author-email: John Kliem <john.kliem3.civ@us.navy.mil>
Project-URL: repository, https://github.com/mit-ll-trusted-autonomy/pyquaticus
Classifier: Development Status :: 4 - Beta
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Requires-Python: <=3.12,>=3.10
Description-Content-Type: text/markdown
Requires-Dist: numpy
Requires-Dist: matplotlib==3.7.1
Requires-Dist: numpy==1.24.3
Requires-Dist: pettingzoo==1.24.3
Requires-Dist: pygame==2.4.0
Requires-Dist: scipy==1.14.1
Requires-Dist: stable-baselines3
Requires-Dist: torch>=1.12.1
Requires-Dist: tyro>=0.5.10
Requires-Dist: gymnasium==0.29.0
Requires-Dist: tensorboard>=2.10.0

## Cpyquaticus ##
This code is an implementation of a  basic MCTF game in c taken from Pyquaticus Simulation Library. 
For all the nice features and custom relative observation space use: https://github.com/mit-ll-trusted-autonomy/pyquaticus 

This Library allows high amounts of environment sampling (On one macbook pro ARM2 core you can achieve 10k steps per second)

### Limitations ###
Currently, this only allows for the normalized or unnormalized actual positions in the observations space, which, which currently does not include relative observation support (TODO).

## Installation ##

Clone the repository
cd into Cpyquaticus
pip install -e .

## Training ##
cd into the Cpyquaticus rl_test folder
Run: 
mkdir CleanMulti
python petting_zoo_ppo_train.py


